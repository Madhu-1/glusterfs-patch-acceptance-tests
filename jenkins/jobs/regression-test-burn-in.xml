<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>glusterfs pre-commit regression test, using 2GB Rackspace VM&apos;s&#xd;
</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>CHANGE_ID</name>
          <description>Change ID to run regression test</description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>BRANCH</name>
          <description>If CHANGE_ID is 0, then test the HEAD of this branch (no feedback to gerrit)</description>
          <defaultValue>master</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DEBUG</name>
          <description>Not yet implemented.

Will set DEBUG=1 when implemented (and enabled here).
</description>
          <defaultValue>0</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.BooleanParameterDefinition>
          <name>CASCADE_RESULTS</name>
          <description>If this CR is dependant on other unmerged CR&apos;s, should the success/failure result of this CR be applied to those as well?  Unticked == No</description>
          <defaultValue>false</defaultValue>
        </hudson.model.BooleanParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>VERDICT </name>
          <description>experimental</description>
          <defaultValue>-1</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.4.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>git://review.gluster.org/glusterfs.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$BRANCH</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.PerBuildTag/>
    </extensions>
  </scm>
  <assignedNode>rackspace_regression_2gb</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 0-23/4 * * *</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>true</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

### This script is still being developed.  Please email    ###
### justin@gluster.org if you notice any weirdness from it ###

BURL=${BUILD_URL}consoleFull
function finish()
{
    if [ $CASCADE_RESULTS = &quot;true&quot; ]; then
        # Apply the verdict to this CR and all unmerged CR&apos;s that this CR depends on
        for rev in $(git rev-list origin/$BRANCH..FETCH_HEAD); do
            echo &quot;Not reporting back to Gerrit.  This is a burn in job only after all&quot;
            #ssh build@review.gluster.org gerrit review --message &quot;&apos;$BURL : $VERDICT&apos;&quot; --project=glusterfs --verified=&quot;$V&quot; --code-review=0 $rev
        done
    else
        # Only apply the verdict to this CR
        echo &quot;Not reporting back to Gerrit.  This is a burn in job only after all&quot;
        #ssh build@review.gluster.org gerrit review --message &quot;&apos;$BURL : $VERDICT&apos;&quot; --project=glusterfs --verified=&quot;$V&quot; --code-review=0 $COMMIT_ID
    fi
}

change=1
if [ &quot;x$CHANGE_ID&quot; = &quot;x&quot; -o &quot;x$CHANGE_ID&quot; = &quot;x0&quot; ]; then
    change=0
fi

git fetch origin
RET=$?

if [ $change -eq 1 ]; then
    REF=$(ssh build@review.gluster.org gerrit query --current-patch-set $CHANGE_ID | grep &apos;ref: &apos; | awk &apos;{print $2}&apos;)
    BRANCH=$(ssh build@review.gluster.org gerrit query --current-patch-set $CHANGE_ID | grep &apos;branch: &apos; | awk &apos;{print $2}&apos;)
    COMMIT_ID=$(ssh build@review.gluster.org gerrit query --current-patch-set $CHANGE_ID | grep &apos;revision&apos; | awk &apos;{print $2}&apos;)

    if [ &quot;x$REF&quot; = &quot;x&quot; ]; then
        exit 1
    fi

    # Manually checkout the branch we&apos;re after
    git checkout origin/$BRANCH
    RET=$?

    # 2014-06-25 JC Do this next bit in a loop, as sometimes it times out with return code 128
    LOOP_COUNTER=0
    LOOP_MAX=9
    while [ &quot;$LOOP_COUNTER&quot; -lt &quot;$LOOP_MAX&quot; ]; do
        git fetch origin $REF
        RET=$?

        if [ $RET -eq 0 ]; then
            LOOP_COUNTER=$LOOP_MAX
        else
            LOOP_COUNTER=`expr $LOOP_COUNTER + 1`
        fi
    done

    git cherry-pick --allow-empty --keep-redundant-commits origin/$BRANCH..FETCH_HEAD
    RET=$?

    if [ $RET -ne 0 ]; then
        git cherry-pick --abort
        RET=$?

        git reset --hard origin/$BRANCH
        RET=$?

        echo &quot;MERGE CONFLICT!&quot;
        ssh build@review.gluster.org gerrit review --message &quot;&apos;$BURL : MERGE CONFLICT&apos;&quot; --project=glusterfs --verified=&quot;-1&quot; --code-review=0 $(git rev-list origin/$BRANCH..FETCH_HEAD)
        RET=$?

        exit 1
    fi
fi

# Display all environment variables in the debugging log
echo
echo &quot;Display all environment variables&quot;
echo &quot;*********************************&quot;
echo
MY_ENV=`env | sort`
echo &quot;$MY_ENV&quot;
echo

# Remove any gluster daemon leftovers from aborted runs
sudo -E bash /opt/qa/cleanup.sh &gt;/dev/null 2&gt;&amp;1

# Clean up the git repo
sudo rm -rf $WORKSPACE/.gitignore $WORKSPACE/*
sudo chown -R jenkins:jenkins $WORKSPACE
cd $WORKSPACE
git reset --hard HEAD

# Clean up other Gluster dirs
sudo rm -rf /var/lib/glusterd/* /build/install /build/scratch &gt;/dev/null 2&gt;&amp;1

# Remove the many left over socket files in var run
sudo rm -f /var/run/????????????????????????????????.socket &gt;/dev/null 2&gt;&amp;1

# Remove GlusterFS log files from previous runs
sudo rm -rf /var/log/glusterfs/* /var/log/glusterfs/.cmd_log_history &gt;/dev/null 2&gt;&amp;1

# Build Gluster
echo
echo &quot;Build GlusterFS&quot;
echo &quot;***************&quot;
echo
set -x
sudo /opt/qa/build.sh
RET=$?
if [ $RET != 0 ]; then
    VERDICT=&quot;BUILD FAILURE&quot;
    V=&quot;-1&quot;
    finish
    exit 1
fi
set +x
echo

# Run the regression test
echo &quot;Run the regression test&quot;
echo &quot;***********************&quot;
echo
set -x
sudo -E bash -x /opt/qa/regression.sh
RET=$?
if [ $RET = 0 ]; then
    V=&quot;+1&quot;
    VERDICT=&quot;SUCCESS&quot;
else
    V=&quot;-1&quot;
    VERDICT=&quot;FAILED&quot;
fi

if [ $change -eq 1 ]; then
    finish
fi

exit $RET</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command></command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.Mailer plugin="mailer@1.16">
      <recipients>maintainers@gluster.org</recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.40.5">
      <recipientList>$DEFAULT_RECIPIENTS</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <recipientList></recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <recipientProviders>
              <hudson.plugins.emailext.plugins.recipients.DevelopersRecipientProvider/>
            </recipientProviders>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$PROJECT_NAME - Build # $BUILD_NUMBER - $BUILD_STATUS!  ${ENV, var=&quot;VERDICT&quot;}</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript>$DEFAULT_PRESEND_SCRIPT</presendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
      <disabled>false</disabled>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
  </publishers>
  <buildWrappers/>
</project>